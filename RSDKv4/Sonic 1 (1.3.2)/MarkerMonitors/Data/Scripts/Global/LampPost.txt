// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: Lamp Post Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.contentsPos.y
private alias object.value1 : object.timer

// States
private alias 0 : MONITOR_STATE_IDLE
private alias 1 : MONITOR_STATE_FALL
private alias 2 : MONITOR_STATE_RISE
private alias 3 : MONITOR_STATE_FADE

// Player Aliases
private alias object.xpos   : player.xpos
private alias object.ypos   : player.ypos
private alias object.ixpos  : player.ixpos
private alias object.iypos  : player.iypos
private alias object.value0 : player.rings
private alias object.yvel   : player.yvel
private alias object.gravity : player.gravity
private alias object.animation : player.animation
private alias object.value16 : player.isSidekick
private alias object.value17 : debugMode.currentSelection
private alias object.value25 : player.gravityStrength
private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

private alias 0 : SLOT_PLAYER1

// Path ID Aliases
private alias 0 : PATH_A

// Monitor type aliases
private alias 0  : MONITOR_BLANK

// ========================
// Function Declarations
// ========================

reserve function MarkerMonitor_DebugDraw
reserve function MarkerMonitor_DebugSpawn


// ========================
// Editor Events
// ========================

private function MarkerMonitor_DebugDraw
	DrawSprite(0)
	DrawSprite(2)
end function


private function MarkerMonitor_DebugSpawn
	CreateTempObject(TypeName[Lamp Post], 0, object.xpos, object.ypos)
end function


// ========================
// Events
// ========================

event ObjectUpdate
	if object.frame != 1
		if object.state == MONITOR_STATE_FALL
			object.yvel += 0x3800
			object.ypos += object.yvel
			if object.yvel >= 0
				ObjectTileCollision(CSIDE_FLOOR, 0, 16, PATH_A)
				if checkResult == true
					object.yvel = 0
					object.state = MONITOR_STATE_IDLE
				end if
			end if
		end if

		foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
			CheckGreater(player[currentPlayer].yvel, -1)
			temp0 = checkResult
			CheckEqual(player[currentPlayer].gravity, GRAVITY_GROUND)
			temp0 |= checkResult

			if temp0 == true
				CheckEqual(player[currentPlayer].animation, ANI_JUMPING)
				temp0 = checkResult
				CheckEqual(player[currentPlayer].animation, ANI_GLIDING)
				temp0 |= checkResult
				CheckEqual(player[currentPlayer].animation, ANI_GLIDING_STOP)
				temp0 |= checkResult
#platform: USE_ORIGINS
				CheckEqual(player[currentPlayer].animation, ANI_HAMMER_JUMP)
				temp0 |= checkResult
				CheckEqual(player[currentPlayer].animation, ANI_HAMMER_DASH)
				temp0 |= checkResult
#endplatform
				if temp0 == true
					if player[currentPlayer].isSidekick == false // Only P1 should be able to break monitors

						// See if P1 has collided with the monitor
						BoxCollisionTest(C_TOUCH, object.entityPos, -16, -14, 16, 16, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
						if checkResult == true
							// Start resetting this object
							object.state = MONITOR_STATE_RISE

							// Create and setup the smoke puff
							CreateTempObject(TypeName[Smoke Puff], 0, object.xpos, object.ypos)
							object[tempObjectPos].drawOrder = 4
							player[currentPlayer].yvel += player[currentPlayer].gravityStrength
							player[currentPlayer].yvel += player[currentPlayer].gravityStrength

							// Player recoil
							FlipSign(player[currentPlayer].yvel)

							// Switch this item to the broken variant
							object.state = MONITOR_STATE_RISE
							object.frame = 1

							if object.priority != PRIORITY_XBOUNDS_DESTROY
								object.priority = PRIORITY_ACTIVE
							end if

							// Setup the alpha for the icon fading
							object.alpha = 0x100

							object.contentsPos.y = object.ypos
							object.timer = -0x30000

							PlaySfx(SfxName[Destroy], false)
						end if
					else
						// Simply act as a platform for P2 since only P1 can break monitors
						BoxCollisionTest(C_PLATFORM, object.entityPos, -15, -14, 15, -4, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
					end if
				else
					// Player isn't in a state to break the monitor, just act as a platform
					BoxCollisionTest(C_PLATFORM, object.entityPos, -15, -14, 15, -4, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
				end if
			else
				// Check if the player hit the monitor
				BoxCollisionTest(C_SOLID, object.entityPos, -15, -16, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)

				// Did the player hit the monitor from underneath?
				if checkResult == COL_BOTTOM
					object.state = MONITOR_STATE_FALL
					object.yvel = -0x20000
					player[currentPlayer].yvel = 0x20000
				end if
			end if
		next
	else
		switch object.state
		case MONITOR_STATE_RISE
			if object.timer < 0
				object.contentsPos.y += object.timer
				object.timer += 0x1800
			else
				object.timer = 0
			end if

			if object.timer == 0
				object.state = MONITOR_STATE_FADE
				object.inkEffect = INK_ALPHA

				lampPostID = object.entityPos
#platform: USE_ORIGINS
				recScore = player.score
				recRing = player[0].rings
#endplatform
				recMilliSeconds = stage.milliSeconds
				recSeconds = stage.seconds
				recMinutes = stage.minutes
				recWaterState = stage.waterState
				recWaterLevel = stage.waterLevel
#platform: USE_ORIGINS
				StatsUsabilityParam1 = StageStatsUsabilityParam1
				StatsUsabilityParam2 = StageStatsUsabilityParam2
				StatsUsabilityParam3 = StageStatsUsabilityParam3
				StatsUsabilityParam4 = StageStatsUsabilityParam4
				StatsUsabilityParam5 = StageStatsUsabilityParam5
#endplatform
				PlaySfx(SfxName[Lamp Post], false)
#platform: USE_ORIGINS
				if options.attractMode == false
					// That little autosave icon, I sure hope you like it...
					CallNativeFunction2(NotifyCallback, NOTIFY_TOUCH_CHECKPOINT, 0)
				end if
#endplatform
			end if
			break

		case MONITOR_STATE_FADE
			object.timer++
			if object.timer == 30
				object.timer = 0
				object.state = MONITOR_STATE_IDLE
				object.propertyValue = MONITOR_BLANK
				if object.priority != PRIORITY_XBOUNDS_DESTROY
					object.priority = PRIORITY_BOUNDS
				end if
			else
				if object.timer > 14
					object.alpha -= 16
				end if
			end if
			break

		case MONITOR_STATE_IDLE
			break
			
		end switch
	end if
end event


event ObjectDraw
	DrawSprite(object.frame)

	if object.frame != 1
		switch StageSetup_monitorOverlayFrame
		case 0
		case 1
			break

		case 6
		case 7
			DrawSprite(3)
			break

		case 12
		case 13
			DrawSprite(4)
			break

		default
			DrawSprite(2)
		end switch
	else
		DrawSpriteFX(2, FX_INK, object.xpos, object.contentsPos.y)
	end if
end event


event ObjectStartup
	LoadSpriteSheet("Global/Items.gif")

	// Monitor frames

	// Base monitor sprites
	SpriteFrame(-16, -16, 32, 32, 18, 1) // 0 - Normal
	SpriteFrame(-16, 0, 32, 16, 51, 166) // 1 - Broken

	// Icons
	SpriteFrame(-8, -9, 16, 14, 1, 137)  // 2 - MONITOR_MARKER

	SpriteFrame(-8, -9, 16, 14, 51, 1)   // 3 - Static 1
	SpriteFrame(-8, -9, 16, 14, 68, 1)   // 4 - Static 2

	foreach(TypeName[Lamp Post], arrayPos0, ALL_ENTITIES)
		// Move all Lamp Posts down to be on the ground since,
		// y'know, Marker Monitor
		object[arrayPos0].iypos += 4
	next

	SetTableValue(TypeName[Lamp Post], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(MarkerMonitor_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(MarkerMonitor_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++

	if lampPostID > 31
		arrayPos0 = lampPostID

		// Move all Players to the Marker Monitor
		currentPlayer = SLOT_PLAYER1
		while currentPlayer < playerCount
			player[currentPlayer].xpos = object[arrayPos0].xpos
			player[currentPlayer].ypos = object[arrayPos0].ypos
			currentPlayer++
		loop

#platform: USE_ORIGINS
		player.score = recScore
		
		if player.deadResetRings == true
			player[0].rings = 0
			player.deadResetRings = false
		else
			player[0].rings = recRing
		end if
		
		ringExtraLife = 100
		ringExtraLife += player[0].rings
		temp0 = player[0].rings
		temp0 %= 100
		ringExtraLife -= temp0
		if ringExtraLife > 300
			ringExtraLife = 1000
		end if
#endplatform

		camera[0].xpos = player[0].ixpos
		camera[0].ypos = player[0].iypos
		
		object[arrayPos0].type = TypeName[Broken Monitor]
		object[arrayPos0].propertyValue = MONITOR_BLANK

		stage.milliSeconds = recMilliSeconds
		stage.seconds = recSeconds
		stage.minutes = recMinutes
		
#platform: USE_ORIGINS
		StageStatsUsabilityParam1 = StatsUsabilityParam1
		StageStatsUsabilityParam2 = StatsUsabilityParam2
		StageStatsUsabilityParam3 = StatsUsabilityParam3
		StageStatsUsabilityParam4 = StatsUsabilityParam4
		StageStatsUsabilityParam5 = StatsUsabilityParam5
	else
		game.timeOver = false
#endplatform
	end if
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-8, -44, 16, 64, 1, 137)
	
	// unused, BUT there are values in the editor which suggest it's supposed to be "lampPostID"
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
